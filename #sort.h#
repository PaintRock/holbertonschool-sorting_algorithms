#include "sort.h"

/**
 * insertion_sort_list - This function that sorts a doubly linked list of
 * integers in ascending order using the Insertion sort.
 * @list: The list for to sort.
 */
void insertion_sort_list(listint_t **list)
{
	listint_t *temp;
	listint_t *before, *current;

	if (list == NULL || (*list)->next == NULL)
		return;

	temp = *list;
	while (temp)
	{
		while ((temp->prev) && (temp->n < temp->prev->n))
		{
			before = temp->prev;
			current = temp;

			before->next = current->next;
			if (current->next)
				current->next->prev = before;
			current->next = before;
			current->prev = before->prev;
			before->prev = current;
			if (current->prev)
				current->prev->next = current;
			else
			*list = current;
			print_list(*list);
		}
		temp = temp->next;
	}
}#ifndef SORT_H
#define SORT_H
#include <stdlib.h>
#include <stdio.h>

/**
 * struct listint_s - Doubly linked list node
 *
 * @n: Integer stored in the node
 * @prev: Pointer to the previous element of the list
 * @next: Pointer to the next element of the list
 */

typedef struct listint_s
{
    const int n;
    struct listint_s *prev;
    struct listint_s *next;
} listint_t;

void bubble_sort(int *array, size_t size);
void insertion_sort_list(listint_t **list);
void selection_sort(int *array, size_t size);
void quick_sort(int *array, size_t size);
void print_array(const int *array, size_t size);
#endif
